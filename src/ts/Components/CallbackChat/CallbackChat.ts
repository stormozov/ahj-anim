import { ICreateElementOptions } from '../../shared/interfaces';
import createElement from '../../utils/createElementFunction';

export default class FeedbackWidget {
  private _container: HTMLElement;
  private _toggleButton!: HTMLButtonElement;
  private _formContainer!: HTMLDivElement;
  private _form!: HTMLFormElement;
  private _isExpanded: boolean = false;

  constructor(containerSelector: string) {
    this._container = this._checkValidContainer(containerSelector);
    this._init();
  }

  private _checkValidContainer(containerSelector: string): HTMLElement {
    const container = document.querySelector(containerSelector);

    if (!container) {
      throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerSelector}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    return container as HTMLElement;
  }

  private _init(): void {
    this._createStructure();
    this._bindEvents();
  }

  private _createStructure(): void {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const { toggleButton, formContainer, form } = this._getHTMLConfigs();

    // –°–æ–∑–¥–∞–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç—ã
    this._toggleButton = createElement(toggleButton) as HTMLButtonElement;
    this._formContainer = createElement(formContainer) as HTMLDivElement;
    this._form = createElement(form) as HTMLFormElement;

    // –î–æ–±–∞–≤–ª—è–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
    this._formContainer.append(this._form);
    this._container.append(this._toggleButton, this._formContainer);
  }

  private _bindEvents(): void {
    this._toggleButton.addEventListener('click', () => this._toggleForm());
    this._bindFormEvents();
  }

  private _bindFormEvents(): void {
    // –°–ª—É—à–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    this._form.addEventListener('submit', (e) => {
      e.preventDefault();
      alert('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      this._toggleForm();
      this._form.reset();
    });

    // –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
    const closeButton = this._form.querySelector('.close-btn');
    if (closeButton instanceof HTMLButtonElement) {
      closeButton.addEventListener('click', () => this._toggleForm());
    }
  }

  private _toggleForm(): void {
    // eslint-disable-next-line @typescript-eslint/no-unused-expressions
    this._isExpanded ? this._collapse() : this._expand();
    this._isExpanded = !this._isExpanded;
  }

  private _expand(): void {
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    this._toggleButton.classList.add('hidden');
    setTimeout(() => {
      this._toggleButton.style.display = 'none';
    }, 100);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    this._formContainer.style.display = 'block';
    const formHeight = `${this._form.scrollHeight}px`;

    requestAnimationFrame(() => {
      this._formContainer.classList.remove('collapsed');
      this._formContainer.classList.add('expanded');
      this._formContainer.style.height = formHeight;
    });
  }

  private _collapse(): void {
    // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É
    this._formContainer.style.height = '0';
    this._formContainer.classList.remove('expanded');
    this._formContainer.classList.add('collapsed');

    setTimeout(() => {
      this._formContainer.style.display = 'none';
    }, 100);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    this._toggleButton.style.display = 'flex';
    setTimeout(() => {
      this._toggleButton.classList.remove('hidden');
    }, 10);
  }

  private _getHTMLConfigs(): Record<string, ICreateElementOptions> {
    return {
      toggleButton: {
        tag: 'button',
        className: 'feedback-toggle-btn',
        text: 'üí¨',
      },
      formContainer: {
        tag: 'div',
        className: ['feedback-form-container', 'collapsed'],
      },
      form: {
        tag: 'form',
        className: 'feedback-form',
        children: [
          {
            tag: 'div',
            className: 'form-header',
            children: [
              {
                tag: 'span',
                text: '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º',
              },
              {
                tag: 'button',
                className: 'close-btn',
                html: '&times;',
              },
            ],
          },
          {
            tag: 'div',
            className: 'form-body',
            children: [
              {
                tag: 'input',
                attrs: {
                  type: 'text',
                  placeholder: '–ò–º—è',
                  required: 'true',
                },
              },
              {
                tag: 'input',
                attrs: {
                  type: 'email',
                  placeholder: 'Email',
                  required: 'true',
                },
              },
              {
                tag: 'textarea',
                attrs: {
                  placeholder: '–°–æ–æ–±—â–µ–Ω–∏–µ',
                  required: 'true',
                },
              },
              {
                tag: 'button',
                attrs: {
                  type: 'submit',
                },
                text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
              },
            ],
          },
        ],
      },
    };
  }
}
