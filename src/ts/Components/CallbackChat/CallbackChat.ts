import { ICreateElementOptions } from '../../shared/interfaces';
import createElement from '../../utils/createElementFunction';

/**
 * –í–∏–¥–∂–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º.
 *
 * –†–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ –≤ –≤–∏–¥–µ –∫—Ä—É–≥–ª–æ–π –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏.
 * –ü—Ä–∏ –∫–ª–∏–∫–µ ‚Äî –∫–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–∞–µ—Ç, –∏–∑ –µ—ë –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–≤–Ω–æ –≤—ã–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞.
 * –§–æ—Ä–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–ø–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º" –∏ –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è (–∫—Ä–µ—Å—Ç–∏–∫–æ–º).
 * –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è ‚Äî —Ñ–æ—Ä–º–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è, –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ.
 *
 * –í—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è—Ç—Å—è 100ms —Å —Ñ—É–Ω–∫—Ü–∏–µ–π `linear`, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å CSS-–ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏.
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ CSS-–∫–ª–∞—Å—Å—ã, –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç—ã).
 *
 * ### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * ```ts
 * const widget = new FeedbackWidget('#feedbackWidget');
 * ```
 *
 * ### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ HTML:
 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ DOM:
 * ```html
 * <div id="feedbackWidget"></div>
 * ```
 *
 * @example
 * document.addEventListener('DOMContentLoaded', () => {
 *   new FeedbackWidget('#feedbackWidget');
 * });
 */
export default class FeedbackWidget {
  private _container: HTMLElement;
  private _toggleButton!: HTMLButtonElement;
  private _formContainer!: HTMLDivElement;
  private _form!: HTMLFormElement;
  private _isExpanded: boolean = false;
  private _animationDuration: number = 100;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ FeedbackWidget
   * @param {string} containerSelector - –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∏ÃÜ–Ω–µ—Ä–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤–∏–¥–∂–µ—Ç
   */
  constructor(containerSelector: string) {
    this._container = this._checkValidContainer(containerSelector);
    this._init();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∏ÃÜ–Ω–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
   *
   * @param {string} containerSelector - –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∏ÃÜ–Ω–µ—Ä–∞
   * @returns {HTMLElement} - –í–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∏ÃÜ–Ω–µ—Ä
   * @throws {Error} - –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∏ÃÜ–Ω–µ—Ä –Ω–µ –±—ã–ª –Ω–∞–∏ÃÜ–¥–µ–Ω
   *
   * @private
   */
  private _checkValidContainer(containerSelector: string): HTMLElement {
    const container = document.querySelector(containerSelector);

    if (!container) {
      throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "${containerSelector}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    return container as HTMLElement;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
   *
   * @private
   */
  private _init(): void {
    this._createStructure();
    this._bindEvents();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∂–µ—Ç–∞
   *
   * @private
   */
  private _createStructure(): void {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const { toggleButton, formContainer, form } = this._getHTMLConfigs();

    // –°–æ–∑–¥–∞–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç—ã
    this._toggleButton = createElement(toggleButton) as HTMLButtonElement;
    this._formContainer = createElement(formContainer) as HTMLDivElement;
    this._form = createElement(form) as HTMLFormElement;

    // –î–æ–±–∞–≤–ª—è–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM
    this._formContainer.append(this._form);
    this._container.append(this._toggleButton, this._formContainer);
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   *
   * @private
   */
  private _bindEvents(): void {
    this._toggleButton.addEventListener('click', () => this._toggleForm());
    this._bindFormEvents();
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Ñ–æ—Ä–º—ã
   *
   * @private
   */
  private _bindFormEvents(): void {
    // –°–ª—É—à–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    this._form.addEventListener('submit', (e) => {
      e.preventDefault();
      alert('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      this._toggleForm();
      this._form.reset();
    });

    // –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
    const closeButton = this._form.querySelector('.close-btn');
    if (closeButton instanceof HTMLButtonElement) {
      closeButton.addEventListener('click', () => this._toggleForm());
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:
   * –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞ ‚Äî —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ—ë, –µ—Å–ª–∏ —Å–≤—ë—Ä–Ω—É—Ç–∞ ‚Äî —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç.
   * –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏-—Ç—Ä–∏–≥–≥–µ—Ä–∞.
   *
   * @private
   */
  private _toggleForm(): void {
    // eslint-disable-next-line @typescript-eslint/no-unused-expressions
    this._isExpanded ? this._collapse() : this._expand();
    this._isExpanded = !this._isExpanded;
  }

  /**
   * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
   *
   * 1. –°–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É-—Ç—Ä–∏–≥–≥–µ—Ä, –¥–æ–±–∞–≤–ª—è—è –∫–ª–∞—Å—Å `hidden` –∏ —á–µ—Ä–µ–∑ 100ms —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç `display: none`.
   * 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–æ—Ä–º—ã (`display: block`).
   * 3. –ò–∑–º–µ—Ä—è–µ—Ç –≤—ã—Å–æ—Ç—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–æ—Ä–º—ã –∏ –∞–Ω–∏–º–∏—Ä—É–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ `height` –∏ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è.
   *
   * –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 100ms, —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å CSS-–ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ (`transition: height 100ms linear`).
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `requestAnimationFrame` –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ —Ä–µ–Ω–¥–µ—Ä–∞.
   *
   * @private
   */
  private _expand(): void {
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    this._toggleButton.classList.add('hidden');
    setTimeout(() => {
      this._toggleButton.style.display = 'none';
    }, this._animationDuration);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    this._formContainer.style.display = 'block';
    const formHeight = `${this._form.scrollHeight}px`;

    requestAnimationFrame(() => {
      this._formContainer.classList.remove('collapsed');
      this._formContainer.classList.add('expanded');
      this._formContainer.style.height = formHeight;
    });
  }

  /**
   * –°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏.
   *
   * 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ñ–æ—Ä–º—ã –≤ `0` –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç CSS-–∫–ª–∞—Å—Å—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è.
   * 2. –ß–µ—Ä–µ–∑ 100ms (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é CSS-–ø–µ—Ä–µ—Ö–æ–¥–∞) –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ `display: none`.
   * 3. –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏-—Ç—Ä–∏–≥–≥–µ—Ä–∞: —Å–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `display: flex`,
   *    –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ 10ms —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞—Å—Å `hidden` –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è.
   *
   * –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 100ms, —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å CSS (`transition: height 100ms linear`).
   * –ó–∞–¥–µ—Ä–∂–∫–∞ 10ms –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–ª–∞–≤–Ω–æ—Å—Ç—å ‚Äî –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã.
   *
   * @private
   */
  private _collapse(): void {
    // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É
    this._formContainer.style.height = '0';
    this._formContainer.classList.remove('expanded');
    this._formContainer.classList.add('collapsed');

    setTimeout(() => {
      this._formContainer.style.display = 'none';
    }, this._animationDuration);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    this._toggleButton.style.display = 'flex';
    setTimeout(() => {
      this._toggleButton.classList.remove('hidden');
    }, 10);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é HTML-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
   *
   * –ö–æ–Ω—Ñ–∏–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Ç–∏–ª–∏—Ç–æ–π `createElement` –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è DOM-–¥–µ—Ä–µ–≤–∞.
   *
   * –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è:
   * - –∫–Ω–æ–ø–∫–∏-—Ç—Ä–∏–≥–≥–µ—Ä–∞ (`toggleButton`)
   * - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ñ–æ—Ä–º—ã (`formContainer`)
   * - —Å–∞–º–æ–π —Ñ–æ—Ä–º—ã —Å —à–∞–ø–∫–æ–π, –∫—Ä–µ—Å—Ç–∏–∫–æ–º –∏ –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞ (`form`)
   *
   * @returns {Record<string, ICreateElementOptions>} –û–±—ä–µ–∫—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
   * –≥–¥–µ –∫–ª—é—á ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.
   *
   * @see ICreateElementOptions ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞: tag, className, attrs, children, text/html.
   *
   * @private
   */
  private _getHTMLConfigs(): Record<string, ICreateElementOptions> {
    return {
      toggleButton: {
        tag: 'button',
        className: 'feedback-toggle-btn',
        text: 'üí¨',
      },
      formContainer: {
        tag: 'div',
        className: ['feedback-form-container', 'collapsed'],
      },
      form: {
        tag: 'form',
        className: 'feedback-form',
        children: [
          {
            tag: 'div',
            className: 'form-header',
            children: [
              {
                tag: 'span',
                text: '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º',
              },
              {
                tag: 'button',
                className: 'close-btn',
                html: '&times;',
              },
            ],
          },
          {
            tag: 'div',
            className: 'form-body',
            children: [
              {
                tag: 'input',
                attrs: {
                  type: 'text',
                  placeholder: '–ò–º—è',
                  required: 'true',
                },
              },
              {
                tag: 'input',
                attrs: {
                  type: 'email',
                  placeholder: 'Email',
                  required: 'true',
                },
              },
              {
                tag: 'textarea',
                attrs: {
                  placeholder: '–°–æ–æ–±—â–µ–Ω–∏–µ',
                  required: 'true',
                },
              },
              {
                tag: 'button',
                attrs: {
                  type: 'submit',
                },
                text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
              },
            ],
          },
        ],
      },
    };
  }
}
